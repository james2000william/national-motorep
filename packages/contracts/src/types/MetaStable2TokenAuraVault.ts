/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type DeploymentParamsStruct = {
  primaryBorrowCurrencyId: PromiseOrValue<BigNumberish>;
  balancerPoolId: PromiseOrValue<BytesLike>;
  liquidityGauge: PromiseOrValue<string>;
  tradingModule: PromiseOrValue<string>;
  settlementPeriodInSeconds: PromiseOrValue<BigNumberish>;
};

export type DeploymentParamsStructOutput = [
  number,
  string,
  string,
  string,
  number
] & {
  primaryBorrowCurrencyId: number;
  balancerPoolId: string;
  liquidityGauge: string;
  tradingModule: string;
  settlementPeriodInSeconds: number;
};

export type AuraVaultDeploymentParamsStruct = {
  auraRewardPool: PromiseOrValue<string>;
  baseParams: DeploymentParamsStruct;
};

export type AuraVaultDeploymentParamsStructOutput = [
  string,
  DeploymentParamsStructOutput
] & { auraRewardPool: string; baseParams: DeploymentParamsStructOutput };

export type PoolContextStruct = {
  pool: PromiseOrValue<string>;
  poolId: PromiseOrValue<BytesLike>;
};

export type PoolContextStructOutput = [string, string] & {
  pool: string;
  poolId: string;
};

export type TwoTokenPoolContextStruct = {
  primaryToken: PromiseOrValue<string>;
  secondaryToken: PromiseOrValue<string>;
  primaryIndex: PromiseOrValue<BigNumberish>;
  secondaryIndex: PromiseOrValue<BigNumberish>;
  primaryDecimals: PromiseOrValue<BigNumberish>;
  secondaryDecimals: PromiseOrValue<BigNumberish>;
  primaryBalance: PromiseOrValue<BigNumberish>;
  secondaryBalance: PromiseOrValue<BigNumberish>;
  basePool: PoolContextStruct;
};

export type TwoTokenPoolContextStructOutput = [
  string,
  string,
  number,
  number,
  number,
  number,
  BigNumber,
  BigNumber,
  PoolContextStructOutput
] & {
  primaryToken: string;
  secondaryToken: string;
  primaryIndex: number;
  secondaryIndex: number;
  primaryDecimals: number;
  secondaryDecimals: number;
  primaryBalance: BigNumber;
  secondaryBalance: BigNumber;
  basePool: PoolContextStructOutput;
};

export type OracleContextStruct = {
  oracleWindowInSeconds: PromiseOrValue<BigNumberish>;
  balancerOracleWeight: PromiseOrValue<BigNumberish>;
};

export type OracleContextStructOutput = [BigNumber, BigNumber] & {
  oracleWindowInSeconds: BigNumber;
  balancerOracleWeight: BigNumber;
};

export type StableOracleContextStruct = {
  ampParam: PromiseOrValue<BigNumberish>;
  baseOracle: OracleContextStruct;
};

export type StableOracleContextStructOutput = [
  BigNumber,
  OracleContextStructOutput
] & { ampParam: BigNumber; baseOracle: OracleContextStructOutput };

export type AuraStakingContextStruct = {
  liquidityGauge: PromiseOrValue<string>;
  auraBooster: PromiseOrValue<string>;
  auraRewardPool: PromiseOrValue<string>;
  auraPoolId: PromiseOrValue<BigNumberish>;
  rewardTokens: PromiseOrValue<string>[];
};

export type AuraStakingContextStructOutput = [
  string,
  string,
  string,
  BigNumber,
  string[]
] & {
  liquidityGauge: string;
  auraBooster: string;
  auraRewardPool: string;
  auraPoolId: BigNumber;
  rewardTokens: string[];
};

export type StrategyVaultSettingsStruct = {
  maxUnderlyingSurplus: PromiseOrValue<BigNumberish>;
  oracleWindowInSeconds: PromiseOrValue<BigNumberish>;
  settlementSlippageLimitPercent: PromiseOrValue<BigNumberish>;
  postMaturitySettlementSlippageLimitPercent: PromiseOrValue<BigNumberish>;
  emergencySettlementSlippageLimitPercent: PromiseOrValue<BigNumberish>;
  maxRewardTradeSlippageLimitPercent: PromiseOrValue<BigNumberish>;
  maxBalancerPoolShare: PromiseOrValue<BigNumberish>;
  balancerOracleWeight: PromiseOrValue<BigNumberish>;
  settlementCoolDownInMinutes: PromiseOrValue<BigNumberish>;
  oraclePriceDeviationLimitPercent: PromiseOrValue<BigNumberish>;
  balancerPoolSlippageLimitPercent: PromiseOrValue<BigNumberish>;
};

export type StrategyVaultSettingsStructOutput = [
  BigNumber,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  number
] & {
  maxUnderlyingSurplus: BigNumber;
  oracleWindowInSeconds: number;
  settlementSlippageLimitPercent: number;
  postMaturitySettlementSlippageLimitPercent: number;
  emergencySettlementSlippageLimitPercent: number;
  maxRewardTradeSlippageLimitPercent: number;
  maxBalancerPoolShare: number;
  balancerOracleWeight: number;
  settlementCoolDownInMinutes: number;
  oraclePriceDeviationLimitPercent: number;
  balancerPoolSlippageLimitPercent: number;
};

export type StrategyVaultStateStruct = {
  totalBPTHeld: PromiseOrValue<BigNumberish>;
  totalStrategyTokenGlobal: PromiseOrValue<BigNumberish>;
  lastSettlementTimestamp: PromiseOrValue<BigNumberish>;
};

export type StrategyVaultStateStructOutput = [BigNumber, BigNumber, number] & {
  totalBPTHeld: BigNumber;
  totalStrategyTokenGlobal: BigNumber;
  lastSettlementTimestamp: number;
};

export type StrategyContextStruct = {
  settlementPeriodInSeconds: PromiseOrValue<BigNumberish>;
  tradingModule: PromiseOrValue<string>;
  vaultSettings: StrategyVaultSettingsStruct;
  vaultState: StrategyVaultStateStruct;
};

export type StrategyContextStructOutput = [
  number,
  string,
  StrategyVaultSettingsStructOutput,
  StrategyVaultStateStructOutput
] & {
  settlementPeriodInSeconds: number;
  tradingModule: string;
  vaultSettings: StrategyVaultSettingsStructOutput;
  vaultState: StrategyVaultStateStructOutput;
};

export type MetaStable2TokenAuraStrategyContextStruct = {
  poolContext: TwoTokenPoolContextStruct;
  oracleContext: StableOracleContextStruct;
  stakingContext: AuraStakingContextStruct;
  baseStrategy: StrategyContextStruct;
};

export type MetaStable2TokenAuraStrategyContextStructOutput = [
  TwoTokenPoolContextStructOutput,
  StableOracleContextStructOutput,
  AuraStakingContextStructOutput,
  StrategyContextStructOutput
] & {
  poolContext: TwoTokenPoolContextStructOutput;
  oracleContext: StableOracleContextStructOutput;
  stakingContext: AuraStakingContextStructOutput;
  baseStrategy: StrategyContextStructOutput;
};

export type InitParamsStruct = {
  name: PromiseOrValue<string>;
  borrowCurrencyId: PromiseOrValue<BigNumberish>;
  settings: StrategyVaultSettingsStruct;
};

export type InitParamsStructOutput = [
  string,
  number,
  StrategyVaultSettingsStructOutput
] & {
  name: string;
  borrowCurrencyId: number;
  settings: StrategyVaultSettingsStructOutput;
};

export type ReinvestRewardParamsStruct = {
  tradeData: PromiseOrValue<BytesLike>;
  minBPT: PromiseOrValue<BigNumberish>;
};

export type ReinvestRewardParamsStructOutput = [string, BigNumber] & {
  tradeData: string;
  minBPT: BigNumber;
};

export interface MetaStable2TokenAuraVaultInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "EMERGENCY_SETTLEMENT_ROLE()": FunctionFragment;
    "NORMAL_SETTLEMENT_ROLE()": FunctionFragment;
    "NOTIONAL()": FunctionFragment;
    "POST_MATURITY_SETTLEMENT_ROLE()": FunctionFragment;
    "REWARD_REINVESTMENT_ROLE()": FunctionFragment;
    "TRADING_MODULE()": FunctionFragment;
    "claimRewardTokens()": FunctionFragment;
    "convertBPTClaimToStrategyTokens(uint256)": FunctionFragment;
    "convertStrategyToUnderlying(address,uint256,uint256)": FunctionFragment;
    "convertStrategyTokensToBPTClaim(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "depositFromNotional(address,uint256,uint256,bytes)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getStrategyContext()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize((string,uint16,(uint256,uint32,uint32,uint32,uint32,uint32,uint16,uint16,uint16,uint16,uint16)))": FunctionFragment;
    "name()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "redeemFromNotional(address,address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "reinvestReward((bytes,uint256))": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "repaySecondaryBorrowCallback(address,uint256,bytes)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setStrategyVaultSettings((uint256,uint32,uint32,uint32,uint32,uint32,uint16,uint16,uint16,uint16,uint16))": FunctionFragment;
    "settleVaultEmergency(uint256,bytes)": FunctionFragment;
    "settleVaultNormal(uint256,uint256,bytes)": FunctionFragment;
    "settleVaultPostMaturity(uint256,uint256,bytes)": FunctionFragment;
    "strategy()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "EMERGENCY_SETTLEMENT_ROLE"
      | "NORMAL_SETTLEMENT_ROLE"
      | "NOTIONAL"
      | "POST_MATURITY_SETTLEMENT_ROLE"
      | "REWARD_REINVESTMENT_ROLE"
      | "TRADING_MODULE"
      | "claimRewardTokens"
      | "convertBPTClaimToStrategyTokens"
      | "convertStrategyToUnderlying"
      | "convertStrategyTokensToBPTClaim"
      | "decimals"
      | "depositFromNotional"
      | "getRoleAdmin"
      | "getStrategyContext"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "name"
      | "proxiableUUID"
      | "redeemFromNotional"
      | "reinvestReward"
      | "renounceRole"
      | "repaySecondaryBorrowCallback"
      | "revokeRole"
      | "setStrategyVaultSettings"
      | "settleVaultEmergency"
      | "settleVaultNormal"
      | "settleVaultPostMaturity"
      | "strategy"
      | "supportsInterface"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_SETTLEMENT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NORMAL_SETTLEMENT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NOTIONAL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "POST_MATURITY_SETTLEMENT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_REINVESTMENT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRADING_MODULE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertBPTClaimToStrategyTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertStrategyToUnderlying",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "convertStrategyTokensToBPTClaim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositFromNotional",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyContext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [InitParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFromNotional",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reinvestReward",
    values: [ReinvestRewardParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "repaySecondaryBorrowCallback",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyVaultSettings",
    values: [StrategyVaultSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "settleVaultEmergency",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleVaultNormal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settleVaultPostMaturity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "strategy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_SETTLEMENT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NORMAL_SETTLEMENT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NOTIONAL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "POST_MATURITY_SETTLEMENT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_REINVESTMENT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRADING_MODULE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertBPTClaimToStrategyTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertStrategyToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertStrategyTokensToBPTClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositFromNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemFromNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reinvestReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repaySecondaryBorrowCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyVaultSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleVaultEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleVaultNormal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleVaultPostMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface MetaStable2TokenAuraVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetaStable2TokenAuraVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    EMERGENCY_SETTLEMENT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    NORMAL_SETTLEMENT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    NOTIONAL(overrides?: CallOverrides): Promise<[string]>;

    POST_MATURITY_SETTLEMENT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    REWARD_REINVESTMENT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    TRADING_MODULE(overrides?: CallOverrides): Promise<[string]>;

    claimRewardTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    convertBPTClaimToStrategyTokens(
      bptClaim: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { strategyTokenAmount: BigNumber }>;

    convertStrategyToUnderlying(
      account: PromiseOrValue<string>,
      strategyTokenAmount: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { underlyingValue: BigNumber }>;

    convertStrategyTokensToBPTClaim(
      strategyTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bptClaim: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    depositFromNotional(
      account: PromiseOrValue<string>,
      deposit: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStrategyContext(
      overrides?: CallOverrides
    ): Promise<[MetaStable2TokenAuraStrategyContextStructOutput]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    redeemFromNotional(
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      strategyTokens: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      underlyingToRepayDebt: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reinvestReward(
      params: ReinvestRewardParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repaySecondaryBorrowCallback(
      token: PromiseOrValue<string>,
      underlyingRequired: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStrategyVaultSettings(
      settings: StrategyVaultSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleVaultEmergency(
      maturity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleVaultNormal(
      maturity: PromiseOrValue<BigNumberish>,
      strategyTokensToRedeem: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleVaultPostMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      strategyTokensToRedeem: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    strategy(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  EMERGENCY_SETTLEMENT_ROLE(overrides?: CallOverrides): Promise<string>;

  NORMAL_SETTLEMENT_ROLE(overrides?: CallOverrides): Promise<string>;

  NOTIONAL(overrides?: CallOverrides): Promise<string>;

  POST_MATURITY_SETTLEMENT_ROLE(overrides?: CallOverrides): Promise<string>;

  REWARD_REINVESTMENT_ROLE(overrides?: CallOverrides): Promise<string>;

  TRADING_MODULE(overrides?: CallOverrides): Promise<string>;

  claimRewardTokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  convertBPTClaimToStrategyTokens(
    bptClaim: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertStrategyToUnderlying(
    account: PromiseOrValue<string>,
    strategyTokenAmount: PromiseOrValue<BigNumberish>,
    maturity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertStrategyTokensToBPTClaim(
    strategyTokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  depositFromNotional(
    account: PromiseOrValue<string>,
    deposit: PromiseOrValue<BigNumberish>,
    maturity: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getStrategyContext(
    overrides?: CallOverrides
  ): Promise<MetaStable2TokenAuraStrategyContextStructOutput>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    params: InitParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  redeemFromNotional(
    account: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    strategyTokens: PromiseOrValue<BigNumberish>,
    maturity: PromiseOrValue<BigNumberish>,
    underlyingToRepayDebt: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reinvestReward(
    params: ReinvestRewardParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repaySecondaryBorrowCallback(
    token: PromiseOrValue<string>,
    underlyingRequired: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStrategyVaultSettings(
    settings: StrategyVaultSettingsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleVaultEmergency(
    maturity: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleVaultNormal(
    maturity: PromiseOrValue<BigNumberish>,
    strategyTokensToRedeem: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleVaultPostMaturity(
    maturity: PromiseOrValue<BigNumberish>,
    strategyTokensToRedeem: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  strategy(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    EMERGENCY_SETTLEMENT_ROLE(overrides?: CallOverrides): Promise<string>;

    NORMAL_SETTLEMENT_ROLE(overrides?: CallOverrides): Promise<string>;

    NOTIONAL(overrides?: CallOverrides): Promise<string>;

    POST_MATURITY_SETTLEMENT_ROLE(overrides?: CallOverrides): Promise<string>;

    REWARD_REINVESTMENT_ROLE(overrides?: CallOverrides): Promise<string>;

    TRADING_MODULE(overrides?: CallOverrides): Promise<string>;

    claimRewardTokens(overrides?: CallOverrides): Promise<BigNumber[]>;

    convertBPTClaimToStrategyTokens(
      bptClaim: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertStrategyToUnderlying(
      account: PromiseOrValue<string>,
      strategyTokenAmount: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertStrategyTokensToBPTClaim(
      strategyTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    depositFromNotional(
      account: PromiseOrValue<string>,
      deposit: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getStrategyContext(
      overrides?: CallOverrides
    ): Promise<MetaStable2TokenAuraStrategyContextStructOutput>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      params: InitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    redeemFromNotional(
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      strategyTokens: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      underlyingToRepayDebt: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reinvestReward(
      params: ReinvestRewardParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    repaySecondaryBorrowCallback(
      token: PromiseOrValue<string>,
      underlyingRequired: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategyVaultSettings(
      settings: StrategyVaultSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    settleVaultEmergency(
      maturity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleVaultNormal(
      maturity: PromiseOrValue<BigNumberish>,
      strategyTokensToRedeem: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleVaultPostMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      strategyTokensToRedeem: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    strategy(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    EMERGENCY_SETTLEMENT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    NORMAL_SETTLEMENT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    NOTIONAL(overrides?: CallOverrides): Promise<BigNumber>;

    POST_MATURITY_SETTLEMENT_ROLE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REWARD_REINVESTMENT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    TRADING_MODULE(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewardTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    convertBPTClaimToStrategyTokens(
      bptClaim: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertStrategyToUnderlying(
      account: PromiseOrValue<string>,
      strategyTokenAmount: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertStrategyTokensToBPTClaim(
      strategyTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    depositFromNotional(
      account: PromiseOrValue<string>,
      deposit: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStrategyContext(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    redeemFromNotional(
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      strategyTokens: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      underlyingToRepayDebt: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reinvestReward(
      params: ReinvestRewardParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repaySecondaryBorrowCallback(
      token: PromiseOrValue<string>,
      underlyingRequired: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStrategyVaultSettings(
      settings: StrategyVaultSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleVaultEmergency(
      maturity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleVaultNormal(
      maturity: PromiseOrValue<BigNumberish>,
      strategyTokensToRedeem: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleVaultPostMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      strategyTokensToRedeem: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    strategy(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EMERGENCY_SETTLEMENT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NORMAL_SETTLEMENT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NOTIONAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POST_MATURITY_SETTLEMENT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REWARD_REINVESTMENT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRADING_MODULE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimRewardTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    convertBPTClaimToStrategyTokens(
      bptClaim: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertStrategyToUnderlying(
      account: PromiseOrValue<string>,
      strategyTokenAmount: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertStrategyTokensToBPTClaim(
      strategyTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositFromNotional(
      account: PromiseOrValue<string>,
      deposit: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStrategyContext(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      params: InitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemFromNotional(
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      strategyTokens: PromiseOrValue<BigNumberish>,
      maturity: PromiseOrValue<BigNumberish>,
      underlyingToRepayDebt: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reinvestReward(
      params: ReinvestRewardParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repaySecondaryBorrowCallback(
      token: PromiseOrValue<string>,
      underlyingRequired: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStrategyVaultSettings(
      settings: StrategyVaultSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleVaultEmergency(
      maturity: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleVaultNormal(
      maturity: PromiseOrValue<BigNumberish>,
      strategyTokensToRedeem: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleVaultPostMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      strategyTokensToRedeem: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    strategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

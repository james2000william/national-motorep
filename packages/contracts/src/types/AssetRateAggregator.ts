/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AssetRateAggregatorInterface extends utils.Interface {
  functions: {
    "BLOCKS_PER_YEAR()": FunctionFragment;
    "SCALE_RATE()": FunctionFragment;
    "decimals()": FunctionFragment;
    "description()": FunctionFragment;
    "getAnnualizedSupplyRate()": FunctionFragment;
    "getExchangeRateStateful()": FunctionFragment;
    "getExchangeRateView()": FunctionFragment;
    "token()": FunctionFragment;
    "underlying()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BLOCKS_PER_YEAR"
      | "SCALE_RATE"
      | "decimals"
      | "description"
      | "getAnnualizedSupplyRate"
      | "getExchangeRateStateful"
      | "getExchangeRateView"
      | "token"
      | "underlying"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BLOCKS_PER_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SCALE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAnnualizedSupplyRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeRateStateful",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeRateView",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BLOCKS_PER_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SCALE_RATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAnnualizedSupplyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRateStateful",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRateView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {};
}

export interface AssetRateAggregator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AssetRateAggregatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BLOCKS_PER_YEAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    SCALE_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    description(overrides?: CallOverrides): Promise<[string]>;

    getAnnualizedSupplyRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getExchangeRateStateful(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getExchangeRateView(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BLOCKS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

  SCALE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  description(overrides?: CallOverrides): Promise<string>;

  getAnnualizedSupplyRate(overrides?: CallOverrides): Promise<BigNumber>;

  getExchangeRateStateful(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getExchangeRateView(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  underlying(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BLOCKS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    SCALE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    description(overrides?: CallOverrides): Promise<string>;

    getAnnualizedSupplyRate(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeRateStateful(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeRateView(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    underlying(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    BLOCKS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    SCALE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    getAnnualizedSupplyRate(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeRateStateful(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getExchangeRateView(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BLOCKS_PER_YEAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SCALE_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAnnualizedSupplyRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchangeRateStateful(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getExchangeRateView(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
